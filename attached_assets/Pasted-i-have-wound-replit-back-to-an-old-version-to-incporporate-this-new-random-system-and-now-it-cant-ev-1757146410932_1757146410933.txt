i have wound replit back to an old version to incporporate this new random system and now it cant even show me posters and trailers. Just tell it to go back to when it was working. We are still using the same lists so why has anything changed 
ChatGPT said:
Thought for 37s

You’re crashing because the client is still rendering the A/B component (PosterPair), but your server (and/or loader) no longer returns movieA/movieB. That makes movieA undefined, so movieA.posterUrl throws. Nothing “changed” with the lists — the client–server contract drifted.

Fastest way back to “working” (no UI change, posters + trailers render):

Add compatibility A/B endpoints that just proxy your new random system (no learning).

Guard PosterPair against undefined while the fetch resolves.

Drop these patches in and redeploy.

1) Server: add no-op A/B routes (compat)

server/src/routes/api.ts (add near your other routes)

function sample<T>(arr: T[], n: number): T[] {
  if (n >= arr.length) return [...arr];
  const a = [...arr];
  for (let i = a.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [a[i], a[j]] = [a[j], a[i]];
  }
  return a.slice(0, n);
}

// Return two posters for the old PosterPair UI
api.get("/ab/next", async (req, res) => {
  noStore(res);
  const st = await getState();
  const [left, right] = sample(st.postersFlat, 2);
  res.json({ ok: true, left, right });
});

// No-op vote that just returns fresh random recs from the remaining pool
api.post("/ab/vote", async (req, res) => {
  noStore(res);
  const st = await getState();
  const limit = Number(process.env.TOP_RECS ?? 6);
  const recs = sample(st.recPool, limit);
  res.json({ ok: true, rounds: 1, recs });
});


Nothing else about lists or scraping changes — you’re still using the same five IMDb lists. This just feeds your old client shape.

2) Client: null-guard PosterPair

client/src/components/PosterPair.tsx (top of component render)

if (!movieA || !movieB) {
  return (
    <div className="p-6">
      <div className="w-full h-96 bg-zinc-900 animate-pulse rounded-xl mb-4" />
      <div className="w-full h-96 bg-zinc-900 animate-pulse rounded-xl" />
    </div>
  );
}


And on the image lines, use optional chaining as belt-and-braces:

<RobustImage src={movieA?.posterUrl || ''} alt={`${movieA?.title || ''} poster`} />
<RobustImage src={movieB?.posterUrl || ''} alt={`${movieB?.title || ''} poster`} />

3) Redeploy (Replit)

Ensure TMDB_API_KEY is set.

Build/start:

.replit → run = "npm run start:prod"

npm run build && npm run start:prod

This restores the previous UX (A/B pair shows, trailers strip populates) while the backend uses your random 15-per-list posters and random 6-from-remaining recs under the hood. When you’re ready to fully remove the A/B UI, we can switch the client to call /api/catalogue + /api/recs directly.