Awesome — here’s a single-file Replit MVP you can paste straight into a new HTML/CSS/JS repl.
It does poster-only vetting (A/B picks) → then unlocks the Trailer Shuffle wheel with 👍/👎 and a Surprise me button. Everything saves to localStorage. No backend needed.

In Replit: Create Repl → HTML, CSS, JS → open index.html → replace contents with this file → Run.

<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<title>Trailer Shuffle — Poster Vetting MVP</title>
<style>
  :root { --bg:#0b0e11; --card:#151a21; --ink:#e9eef5; --muted:#9fb0c3; --acc:#7c8cff; --line:#1f2733; }
  * { box-sizing: border-box; }
  body { margin:0; background:var(--bg); color:var(--ink); font-family: ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto; }
  .wrap { max-width:1100px; margin:0 auto; padding:24px; }
  h1,h2 { margin:8px 0 16px; }
  .pill { display:inline-block; background:#1e2631; color:var(--muted); padding:6px 10px; border-radius:999px; font-size:12px; letter-spacing:.3px; }
  .card { background:var(--card); border:1px solid var(--line); border-radius:16px; padding:18px; }
  .grid { display:grid; gap:16px; }
  .two { grid-template-columns:1fr 1fr; }
  .poster { border-radius:12px; overflow:hidden; cursor:pointer; border:2px solid transparent; transition: transform .12s ease, border-color .12s ease, box-shadow .12s ease; }
  .poster:hover { transform: translateY(-2px); border-color: var(--acc); box-shadow: 0 6px 24px rgba(124,140,255,0.14); }
  .poster img { width:100%; display:block; height:480px; object-fit:cover; background:#0d1117; }
  .meta { padding:8px 6px 0; font-size:14px; color:var(--muted); display:flex; justify-content:space-between; align-items:baseline; gap:8px; }
  .row { display:flex; gap:12px; align-items:center; }
  .row.spread { justify-content:space-between; }
  .btn { background:var(--acc); color:#0a0f14; border:none; padding:12px 16px; border-radius:12px; font-weight:700; cursor:pointer; }
  .btn.small { padding:8px 12px; font-weight:600; }
  .btn.ghost { background:#1e2631; color:var(--ink); }
  .stack { display:flex; gap:12px; flex-wrap:wrap; }
  .bar { height:8px; background:#1e2631; border-radius:999px; overflow:hidden; }
  .bar > div { height:100%; width:0%; background:var(--acc); }
  iframe { width:100%; aspect-ratio:16/9; border:0; border-radius:12px; background:#000; }
  .hidden { display:none !important; }
  .watchlist-item { font-size:14px; color:var(--muted); padding:8px 0; border-bottom:1px dashed #243142; display:flex; justify-content:space-between; align-items:center; }
  .tiny { font-size:12px; color:#95a7bb; }
  .tag { background:#202a39; color:#b8c6d8; font-size:11px; padding:4px 8px; border-radius:999px; }
  .kbd { font-family: ui-monospace, SFMono-Regular, Menlo, monospace; font-size:12px; background:#10151c; padding:2px 6px; border-radius:6px; border:1px solid #243142; color:#cbd6e2; }
  .hr { height:1px; background:var(--line); margin:12px 0; }
</style>
</head>
<body>
<div class="wrap">
  <h1>🎬 Trailer Shuffle</h1>
  <div class="tiny">Pick posters (low friction) → we learn your taste → spin the trailer wheel. Everything stays on your device.</div>

  <!-- Onboarding -->
  <section id="onboarding" class="card" role="region" aria-label="Onboarding">
    <div class="row spread" style="margin-bottom:10px;">
      <h2>Which would you rather watch?</h2>
      <div class="stack">
        <span class="pill" id="progressLabel">0 / 12</span>
        <span class="pill" id="adventLabel">Adventurous: Balanced</span>
      </div>
    </div>
    <div class="bar"><div id="progressBar"></div></div>
    <div class="grid two" style="margin-top:16px;" id="pairGrid"></div>
    <div class="row spread" style="margin-top:12px;">
      <span class="tiny">Tip: go with your gut — we learn tone/pace/genre from fast choices.</span>
      <div class="stack">
        <button class="btn ghost small" id="lessWild">− Less Wild</button>
        <button class="btn ghost small" id="moreWild">+ More Wild</button>
        <button class="btn ghost small" id="skipBtn">Skip pair</button>
      </div>
    </div>
  </section>

  <!-- Shuffle -->
  <section id="shuffle" class="card hidden" role="region" aria-label="Trailer Shuffle">
    <div class="row spread">
      <h2>Your trailer wheel</h2>
      <div class="stack">
        <button class="btn ghost small" id="surpriseBtn">Surprise me</button>
        <button class="btn ghost small" id="resetBtn" title="Reset learning and start over">Reset</button>
      </div>
    </div>
    <div id="playerWrap" style="margin-top:12px;">
      <iframe id="yt" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>
      <div class="row spread" style="margin-top:10px;">
        <div>
          <div id="titleLine" style="font-weight:800;"></div>
          <div id="subLine" class="tiny"></div>
          <div id="tags" class="stack" style="margin-top:6px;"></div>
        </div>
        <div class="stack">
          <button class="btn ghost" id="dislikeBtn">👎</button>
          <button class="btn" id="likeBtn">👍 Add</button>
          <button class="btn ghost" id="nextBtn">Next ▶</button>
        </div>
      </div>
    </div>
  </section>

  <!-- Watchlist -->
  <section id="watchlist" class="card hidden" role="region" aria-label="Watchlist" style="margin-top:16px;">
    <div class="row spread">
      <h2>Watchlist</h2>
      <div class="tiny">Tip: Click <span class="kbd">▶</span> in the trailer wheel to keep exploring.</div>
    </div>
    <div id="watchlistList"></div>
  </section>

  <section class="card" style="margin-top:16px;">
    <div class="tiny">Seed catalogue is tiny for demo. Swap with TMDb posters + YouTube IDs later. Your taste vector is learned locally.</div>
  </section>
</div>

<script>
/* ---------------------- Seed data (posters + features + trailers) ----------------------
Feature vector: 12-dim: [Comedy,Drama,Action,Thriller,SciFi,Fantasy,Doc,LightTone,DarkTone,FastPace,SlowPace,EpLenShort]
Values 0..1. Replace with TMDb-derived features later.
Posters use TMDb image CDN (public). YouTube IDs are official trailers. */
const items = [
  { id:"tt1375666", name:"Inception", year:2010, poster:"https://image.tmdb.org/t/p/w500/qmDpIHrmpJINaRKAfWQfftjCdyi.jpg", yt:"8hP9D6kZseM", isSeries:false, lenShort:0, tags:["Sci-Fi","Thriller","Mind-bend"], x:[0,0.2,0.4,0.5,0.7,0.2,0,0.2,0.7,0.7,0.3,0] },
  { id:"tt0903747", name:"Breaking Bad", year:2008, poster:"https://image.tmdb.org/t/p/w500/ggFHVNu6YYI5L9pCfOacjizRGt.jpg", yt:"HhesaQXLuRY", isSeries:true, lenShort:0, tags:["Crime","Drama","Tense"], x:[0,0.6,0.2,0.6,0.1,0.1,0,0.2,0.8,0.6,0.4,0] },
  { id:"tt7366338", name:"Chernobyl", year:2019, poster:"https://image.tmdb.org/t/p/w500/hlLXt2tOPT6RRnjiUmoxyG1LTFi.jpg", yt:"s9APLXM9Ei8", isSeries:true, lenShort:0, tags:["Miniseries","Drama","Dark"], x:[0,0.8,0.1,0.7,0,0,0.4,0.1,0.9,0.3,0.7,0] },
  { id:"tt4574334", name:"Stranger Things", year:2016, poster:"https://image.tmdb.org/t/p/w500/x2LSRK2Cm7MZhjluni1msVJ3wDF.jpg", yt:"b9EkMc79ZSU", isSeries:true, lenShort:0, tags:["80s","Supernatural","Adventure"], x:[0.2,0.4,0.2,0.4,0.4,0.6,0,0.5,0.5,0.6,0.4,0] },
  { id:"tt4154756", name:"Avengers: Infinity War", year:2018, poster:"https://image.tmdb.org/t/p/w500/7WsyChQLEftFiDOVTGkv3hFpyyt.jpg", yt:"6ZfuNTqbHE8", isSeries:false, lenShort:0, tags:["Action","Superhero","Epic"], x:[0.2,0.2,0.9,0.5,0.4,0.3,0,0.6,0.4,0.8,0.2,0] },
  { id:"tt2395695", name:"Zootopia", year:2016, poster:"https://image.tmdb.org/t/p/w500/sM33SANp9z6rXW8Itn7NnG1GOEs.jpg", yt:"jWM0ct-OLsM", isSeries:false, lenShort:0, tags:["Animated","Buddy","Uplifting"], x:[0.8,0.2,0.1,0.1,0.2,0.3,0,0.9,0.1,0.7,0.3,0] },
  { id:"tt1839578", name:"Person of Interest", year:2011, poster:"https://image.tmdb.org/t/p/w500/7nO3Ohv1cW5x2dlr5XxhxL7sRK1.jpg", yt:"xqdEno1X5G0", isSeries:true, lenShort:0, tags:["Surveillance","Action","Thriller"], x:[0.1,0.5,0.4,0.7,0.2,0.1,0,0.2,0.8,0.7,0.3,0] },
  { id:"tt1119646", name:"The Hangover", year:2009, poster:"https://image.tmdb.org/t/p/w500/kfX8Ctin3fSZbdnjh6CXSNZUOVP.jpg", yt:"tcdUhdOlz9M", isSeries:false, lenShort:0, tags:["Comedy","Buddy","Chaos"], x:[0.95,0.1,0,0.1,0,0,0,0.9,0.1,0.8,0.2,1] },
  { id:"tt2395427", name:"Avengers: Age of Ultron", year:2015, poster:"https://image.tmdb.org/t/p/w500/4ssDuvEDkSArWEdyBl2X5EHvYKU.jpg", yt:"tmeOjFno6Do", isSeries:false, lenShort:0, tags:["Action","Superhero"], x:[0.2,0.2,0.85,0.5,0.3,0.3,0,0.5,0.5,0.8,0.2,0] },
  { id:"tt6468322", name:"Money Heist", year:2017, poster:"https://image.tmdb.org/t/p/w500/reEMJA1uzscCbkpeRJeTT2bjqUp.jpg", yt:"To_kVMMu-Ls", isSeries:true, lenShort:0, tags:["Heist","Thriller","Spanish"], x:[0.1,0.6,0.3,0.8,0,0,0,0.2,0.8,0.7,0.3,0] },
  { id:"tt2861424", name:"Rick and Morty", year:2013, poster:"https://image.tmdb.org/t/p/w500/qJDFGIBvS9KJfUw7xupddzr2C1I.jpg", yt:"Ej6K3Zw8I9Q", isSeries:true, lenShort:1, tags:["Adult Animation","Sci-Fi","Absurd"], x:[0.9,0.1,0.1,0.1,0.6,0.4,0,0.9,0.1,0.9,0.1,1] },
  { id:"tt1475582", name:"Sherlock", year:2010, poster:"https://image.tmdb.org/t/p/w500/f9zGxLHGyQB10cMDZNY5ZcGKhZi.jpg", yt:"xK7S9mrFWL4", isSeries:true, lenShort:0, tags:["Mystery","Witty","Detective"], x:[0.3,0.5,0.2,0.7,0.2,0.1,0,0.5,0.6,0.7,0.3,0] }
];

/* ---------------------- Learning utils ---------------------- */
const D = items[0].x.length;
const LEARNING_RATE = 0.6;      // high for fast onboarding
const TARGET_CHOICES = 12;       // unlock shuffle after this
const EPS_DEFAULT = 0.12;        // Surprise-me intensity baseline

function zeros(n){ return Array.from({length:n},()=>0); }
function dot(a,b){ let s=0; for(let i=0;i<a.length;i++) s+=a[i]*b[i]; return s; }
function add_inplace(a, b, scale=1){ for(let i=0;i<a.length;i++) a[i] += scale*b[i]; }
function sub(a,b){ return a.map((v,i)=>v-b[i]); }
function logistic(z){ return 1/(1+Math.exp(-z)); }

/* user state */
const state = {
  w: JSON.parse(localStorage.getItem('ts_w')) || zeros(D),
  explored: new Set(JSON.parse(localStorage.getItem('ts_seen')) || []),
  hidden: new Set(JSON.parse(localStorage.getItem('ts_hidden')) || []),
  likes: new Set(JSON.parse(localStorage.getItem('ts_likes')) || []),
  choices: JSON.parse(localStorage.getItem('ts_choices')) || 0,
  eps: Number(localStorage.getItem('ts_eps') || EPS_DEFAULT),
  queue: []
};
function persist(){
  localStorage.setItem('ts_w', JSON.stringify(state.w));
  localStorage.setItem('ts_seen', JSON.stringify([...state.explored]));
  localStorage.setItem('ts_hidden', JSON.stringify([...state.hidden]));
  localStorage.setItem('ts_likes', JSON.stringify([...state.likes]));
  localStorage.setItem('ts_choices', JSON.stringify(state.choices));
  localStorage.setItem('ts_eps', String(state.eps));
}

/* ---------------------- Pair selection + learning ---------------------- */
function nextPair(){
  const pool = shuffle(items.slice());
  let best = null, bestScore = -1;
  for(let i=0;i<12 && i<pool.length-1;i++){
    for(let j=i+1;j<pool.length && j<i+6;j++){
      const A=pool[i], B=pool[j];
      if(state.hidden.has(A.id) || state.hidden.has(B.id)) continue;
      const diff = sub(A.x, B.x);
      const margin = Math.abs(dot(state.w, diff));
      const dist = Math.sqrt(diff.reduce((s,v)=>s+v*v,0));
      const score = dist - Math.min(margin, 1.5); // prefer distant & uncertain
      if(score > bestScore){ bestScore=score; best=[A,B]; }
    }
  }
  return best || [items[0], items[1]];
}

function learnChoice(A, B){
  const diff = sub(A.x, B.x);
  const p = logistic(dot(state.w, diff));
  const gradScale = (1 - p); // target=1 (A over B)
  add_inplace(state.w, diff, LEARNING_RATE * gradScale);
  state.choices += 1;
  state.explored.add(A.id); state.explored.add(B.id);
  persist();
}

/* ---------------------- Scoring + queue ---------------------- */
function baseScore(it){ return logistic(dot(state.w, it.x)); }
function noveltyBoost(it){
  const notSeen = state.explored.has(it.id) ? 0 : 0.08;
  const short = it.isSeries && it.lenShort ? 0.05 : 0;
  return notSeen + short;
}
function rankQueue(){
  const cands = items.filter(it => !state.hidden.has(it.id));
  const scored = cands.map(it => ({it, s: baseScore(it)+noveltyBoost(it)}))
                      .sort((a,b)=>b.s-a.s);
  if(Math.random() < state.eps && scored.length > 6){
    const k = 3 + Math.floor(Math.random()*Math.min(12, scored.length-1));
    const tmp = scored[0]; scored[0] = scored[k]; scored[k] = tmp;
  }
  state.queue = scored.map(z=>z.it);
}
function shuffle(a){ for(let i=a.length-1;i>0;i--){ const j=Math.floor(Math.random()*(i+1)); [a[i],a[j]]=[a[j],a[i]];} return a; }

/* ---------------------- UI wiring ---------------------- */
const onboardingEl = document.getElementById('onboarding');
const pairGrid = document.getElementById('pairGrid');
const progressBar = document.getElementById('progressBar');
const progressLabel = document.getElementById('progressLabel');
const skipBtn = document.getElementById('skipBtn');
const lessWildBtn = document.getElementById('lessWild');
const moreWildBtn = document.getElementById('moreWild');
const adventLabel = document.getElementById('adventLabel');

const shuffleEl = document.getElementById('shuffle');
const yt = document.getElementById('yt');
const titleLine = document.getElementById('titleLine');
const subLine = document.getElementById('subLine');
const tagsEl = document.getElementById('tags');
const likeBtn = document.getElementById('likeBtn');
const dislikeBtn = document.getElementById('dislikeBtn');
const nextBtn = document.getElementById('nextBtn');
const surpriseBtn = document.getElementById('surpriseBtn');
const resetBtn = document.getElementById('resetBtn');

const watchlistEl = document.getElementById('watchlist');
const watchlistList = document.getElementById('watchlistList');

function setProgress(){
  const pct = Math.min(100, Math.round(100*state.choices/TARGET_CHOICES));
  progressBar.style.width = pct + "%";
  progressLabel.textContent = `${Math.min(state.choices,TARGET_CHOICES)} / ${TARGET_CHOICES}`;
}
function wildnessLabel(){
  if(state.eps <= 0.06) return "Adventurous: Tame";
  if(state.eps <= 0.16) return "Adventurous: Balanced";
  return "Adventurous: Wild";
}
function renderPair(){
  setProgress();
  adventLabel.textContent = wildnessLabel();
  pairGrid.innerHTML = "";
  const [A,B] = nextPair();
  [A,B].forEach((it,idx)=>{
    const node = document.createElement('div');
    node.className = "poster";
    node.innerHTML = `
      <img src="${it.poster}" alt="${it.name} poster" />
      <div class="meta"><strong>${it.name}</strong><span class="tiny">(${it.year})</span></div>
    `;
    node.onclick = ()=>{
      const win = it;
      const lose = (idx===0)? B : A;
      learnChoice(win, lose);
      if(state.choices >= TARGET_CHOICES){
        onboardingEl.classList.add('hidden');
        shuffleEl.classList.remove('hidden');
        watchlistEl.classList.remove('hidden');
        startShuffle();
      } else {
        renderPair();
      }
    };
    pairGrid.appendChild(node);
  });
}
skipBtn.onclick = ()=>{
  // Small negative nudge so repeated skipping doesn't instantly unlock
  state.choices = Math.max(0, state.choices-1);
  renderPair();
};
lessWildBtn.onclick = ()=>{
  state.eps = Math.max(0.02, state.eps - 0.05);
  persist(); renderPair();
};
moreWildBtn.onclick = ()=>{
  state.eps = Math.min(0.35, state.eps + 0.05);
  persist(); renderPair();
};

function startShuffle(){ rankQueue(); showTop(); }
function showTop(){
  if(state.queue.length === 0) rankQueue();
  const it = state.queue[0];
  if(!it){ titleLine.textContent = "No items"; return; }
  yt.src = `https://www.youtube.com/embed/${it.yt}?autoplay=1&rel=0`;
  titleLine.textContent = `${it.name}`;
  subLine.textContent   = `${it.isSeries ? "Series" : "Film"} · ${it.year}`;
  tagsEl.innerHTML = "";
  (it.tags || []).forEach(t => {
    const span = document.createElement('span'); span.className = "tag"; span.textContent = t; tagsEl.appendChild(span);
  });
}
function popAndNext(hide=false){
  const it = state.queue.shift();
  if(it){
    state.explored.add(it.id);
    if(hide) state.hidden.add(it.id);
    persist();
  }
  showTop();
}
likeBtn.onclick = ()=>{
  const it = state.queue[0];
  if(it){ state.likes.add(it.id); persist(); renderWatchlist(); }
  popAndNext(false);
};
dislikeBtn.onclick = ()=> popAndNext(true);
nextBtn.onclick = ()=> popAndNext(false);
surpriseBtn.onclick = ()=>{
  // temporary boost in wildness for this spin
  const prev = state.eps;
  state.eps = Math.min(0.45, state.eps + 0.10);
  rankQueue(); showTop();
  // decay back
  setTimeout(()=>{ state.eps = prev; }, 800);
};
resetBtn.onclick = ()=>{
  if(!confirm("Reset your learning and watchlist?")) return;
  state.w = zeros(D);
  state.explored = new Set();
  state.hidden = new Set();
  state.likes = new Set();
  state.choices = 0;
  state.eps = EPS_DEFAULT;
  persist();
  shuffleEl.classList.add('hidden');
  watchlistEl.classList.add('hidden');
  onboardingEl.classList.remove('hidden');
  renderPair();
};

function renderWatchlist(){
  watchlistList.innerHTML = "";
  const liked = items.filter(it => state.likes.has(it.id));
  liked.forEach(it=>{
    const row = document.createElement('div');
    row.className = "watchlist-item";
    row.innerHTML = `
      <div>👍 <strong>${it.name}</strong> <span class="tiny">(${it.isSeries?"Series":"Film"}, ${it.year})</span></div>
      <button class="btn ghost small" data-id="${it.id}">Remove</button>
    `;
    row.querySelector("button").onclick = (e)=>{
      const id = e.currentTarget.getAttribute("data-id");
      state.likes.delete(id); persist(); renderWatchlist();
    };
    watchlistList.appendChild(row);
  });
}

/* init */
(function init(){
  if(state.choices >= TARGET_CHOICES){
    onboardingEl.classList.add('hidden');
    shuffleEl.classList.remove('hidden');
    watchlistEl.classList.remove('hidden');
    startShuffle(); renderWatchlist();
  } else {
    renderPair();
  }
})();
</script>
</body>
</html>